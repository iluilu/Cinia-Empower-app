<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>sc_task</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="sc_task">correlation_id=EMPOWER^EQ<item endquery="false" field="correlation_id" goto="false" newquery="false" operator="=" or="false" value="EMPOWER"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Empower work order integration Create</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

    function convertDate(dt) {
        //gs.print(dt);
        var aika = new GlideDateTime(dt);
        var newAika = aika.getDisplayValueInternal();
        var dateArr = newAika.split(' ');
        var newDate = dateArr[0] + "T" + dateArr[1];
        return newDate;
      }
  
    var payload = {
        "messageid": "",
        "order.profileid": "Tilaus",
		"order.id": current.number.toString(),
		"order.projectid": current.change_request.service_offering.u_project_id.toString(),
		"order.costcenternumber": current.change_request.service_offering.u_cost_center_number.toString(),
		"order.issuedatetime": convertDate(current.sys_created_on.toString()),
		"order.note": current.short_description.toString(),
        "order.orderreference": "",
        "order.billingreference": "",
        "order.workingarea": current.u_working_area.toString(),
        "order.urgent": "",
        "order.documentreferences.document.id": "",
        "order.documentreferences.document.name": "",
        "order.worktype": current.u_type.toString().toUpperCase(),
        "order.ordererparty.id": "003714653416",
        "order.ordererparty.contact.id": current.request_item.service_offering.managed_by.sys_id.toString(),
        "order.ordererparty.contact.name": current.request_item.service_offering.managed_by.name.toString(),
        "order.ordererparty.contact.telephone": current.request_item.service_offering.managed_by.mobile_phone.toString(),
        "order.ordererparty.contact.electronicmail": current.request_item.service_offering.managed_by.email.toString(),
        "order.customerparty.name": current.request_item.company.name.toString(),
        "order.customerparty.postaladdress.postbox": current.request_item.company.zip.toString(),
        "order.customerparty.postaladdress.streetname": current.request_item.company.street.toString(),
        "order.customerparty.postaladdress.cityname": current.request_item.company.city.toString(),
        "order.customerparty.postaladdress.postalzone": current.request_item.company.state.toString(),
        "order.customerparty.contact.name": current.request.requested_for.name.toString(),
        "order.customerparty.contact.telephone": current.request.requested_for.mobile_phone.toString(),
        "order.customerparty.contact.electronicmail": current.request.requested_for.email.toString(),
        "order.delivery.deliverylocation": [],
        "order.delivery.requesteddeliveryperiod.startdate": convertDate(current.u_planned_start.toString()),
        "order.delivery.requesteddeliveryperiod.enddate": convertDate(current.u_planned_end.toString()),
        "order.delivery.technicalcontact.name": current.u_technical_contact_person.name.toString(),
        "order.delivery.technicalcontact.telephone": current.u_technical_contact_person.mobile_phone.toString(),
        "order.delivery.technicalcontact.electronicmail": current.u_technical_contact_person.email.toString(),
        "order.orderline": []
    };
    //x_cgo_empower_work_work_order
    // Loop through construction sites
    var site = new GlideRecord('x_cgo_empower_work_construction_site');
    site.addQuery('work_order_id', current.u_work_order);
    site.query();
    while (site.next()) {
        // In this section mappings are done based on construction site record
        /*
            <DeliveryLocation>
                <ID>11A</ID>
                <Description>Varastopaikka 32</Description>
                <Address>
                  <ID>12</ID>
                  <Room>243</Room>
                  <StreetName>Voimantie 99</StreetName>
                  <Directions>Kulkuohjeet</Directions>
                  <CityName>Tampere</CityName>
                  <PostalZone>33680</PostalZone>
                  <LocationCoordinate>
                    <LatitudeX>62</LatitudeX>
                    <LongitudeY>34.002</LongitudeY>
                  </LocationCoordinate>
                </Address>
              </DeliveryLocation>
      */
        var siteXml = "<DeliveryLocation>" +
            "<ID>" + site.site_id.toString() + "</ID>" +
            "<Description>" + site.additional_information.toString() + "</Description>" +
			"<DescriptionOfTheWork>" + site.description_of_required_work.toString() + "</DescriptionOfTheWork>" +
            "<Address>" + site.address.toString() + "</Address>" +
            //"<ID>" + site.change_task.location.name.toString() + "</ID>" + 
            //"<Room>243</Room>" +
            //"<StreetName>Voimantie 99</StreetName>" + 
			"<Directions>" + site.entrance_instructions.toString() + "</Directions>" +
            "<CityName>" + site.postal_code.city.toString() + "</CityName>" +
            "<PostalZone>" + site.postal_code.zip.toString() + "</PostalZone>" +
            "<LocationCoordinate>" +
            "<LatitudeX>" + site.postal_code.u_latitude.toString() + "</LatitudeX>" +
            "<LongitudeY>" + site.postal_code.u_longitude.toString() + "</LongitudeY>" +
            "</LocationCoordinate>" +
            "</DeliveryLocation>";
        /*var siteObj = {
            "order.delivery.deliverylocation.id": site.site_id.toString(),
            "order.delivery.deliverylocation.description": site.additional_information.toString(),
            "order.delivery.deliverylocation.address.id": site.change_task.location.name.toString(),
            "order.delivery.deliverylocation.address.room": "",
            "order.delivery.deliverylocation.address.streetname": "",
            "order.delivery.deliverylocation.address.directions": "",
            "order.delivery.deliverylocation.address.cityname": "",
            "order.delivery.deliverylocation.address.postalzone": "",
            "order.delivery.deliverylocation.address.locationcoordinate.latitudex": "",
            "order.delivery.deliverylocation.address.locationcoordinate.longitudey": ""
        };*/
        payload["order.delivery.deliverylocation"].push(siteXml);

        var product = new GlideRecord("x_cgo_empower_work_m2m_construction_sites_products");
        product.addQuery("construction_site", site.sys_id);
        product.query();
        while (product.next()) {
            // In this section mappings are done based on product(s) record(s)
            /*
            <Note>Asennettavan laitteen takuutodistukset on toimitettava tilaajalle sovitusti.</Note>
              <LineItem>
                <ID>003</ID>
                <SiteID>11A</SiteID>
                <Quantity>2</Quantity>
                <Item>
                  <ID>Itemin ID</ID>
                  <Description>PS 320683 600X60X600 HARMAA OVI</Description>
                  <Name>PS 320683 600X60X600 HAR OVI</Name>
                  <AdditionalInformation>Asennuksesta sovittava huoneiston omistajan kanssa</AdditionalInformation>
                </Item>
              </LineItem>
            */
            var productXml = "<OrderLine>" +
                "<Note>" + product.task.short_description.toString() + " " + product.task.description.toString() + "</Note>" +
                "<LineItem>" +
                "<ID>" + product.sys_id.toString() + "</ID>" +
                "<SiteID>" + product.construction_site.site_id.toString() + "</SiteID>" +
                "<Quantity>" + product.amount.toString() + "</Quantity>" +
                "<Item>" +
                "<ID>" + product.price.work_order_product.product_number.toString() + "</ID>" +
                "<Description>" + product.price.work_order_product.description.toString() + "</Description>" +
                "<Name>" + product.price.work_order_product.name.toString() + "</Name>" +
                "<AdditionalInformation>" + product.price.work_order_product.description.toString() + "</AdditionalInformation>" +
                "</Item>" +
                "</LineItem>" +
                "</OrderLine>";

            /*var productObj = {
                "order.orderline.note": product.task.short_description.toString() + " " + product.task.description.toString(),
                "order.orderline.lineitem.siteid": product.construction_site.site_id.toString(),
                "order.orderline.lineitem.id": "",
                "order.orderline.lineitem.quantity": "",
                "order.orderline.lineitem.item.id": "",
                "order.orderline.lineitem.item.description": "",
                "order.orderline.lineitem.item.name": "",
                "order.orderline.lineitem.item.additionalinformation": ""
            };*/
            payload["order.orderline"].push(productXml);
        }
    }

    gs.info("Empower integration :: Payload: " + JSON.stringify(payload), 'EMPOWER-INTEGRATION');

    try {
        var r = new sn_ws.RESTMessageV2('x_cgo_empower_work.Empower work order', 'order');
		r.setStringParameterNoEscape('MessageID', payload["messageid"]);
		r.setStringParameterNoEscape('Order.ProfileID', payload["order.profileid"].toString());
		r.setStringParameterNoEscape('Order.ID', payload["order.id"]);
		r.setStringParameterNoEscape('Order.ProjectId', payload["order.projectid"]);
		r.setStringParameterNoEscape('Order.CostCenterNumber', payload["order.costcenternumber"]);
		r.setStringParameterNoEscape('Order.IssueDateTime', payload["order.issuedatetime"]);
		r.setStringParameterNoEscape('Order.Note', payload["order.note"]);
		r.setStringParameterNoEscape('Order.OrderReference', payload["order.orderreference"]);
		r.setStringParameterNoEscape('Order.BillingReference', payload["order.billingreference"]);
		r.setStringParameterNoEscape('Order.WorkingArea', payload["order.workingarea"]);
        r.setStringParameterNoEscape('Order.Urgent', payload["order.urgent"]);
        r.setStringParameterNoEscape('Order.WorkType', payload["order.worktype"]);
        r.setStringParameterNoEscape('Order.OrdererParty.ID', payload["order.ordererparty.id"]);
        r.setStringParameterNoEscape('Order.OrdererParty.Contact.ID', payload["order.ordererparty.contact.id"]);
        r.setStringParameterNoEscape('Order.OrdererParty.Contact.Name', payload["order.ordererparty.contact.name"]);
        r.setStringParameterNoEscape('Order.OrdererParty.Contact.Telephone', payload["order.ordererparty.contact.telephone"]);
        r.setStringParameterNoEscape('Order.OrdererParty.Contact.ElectronicMail', payload["order.ordererparty.contact.electronicmail"]);
        r.setStringParameterNoEscape('Order.CustomerParty.Name', payload["order.customerparty.contact.name"]);
        r.setStringParameterNoEscape('Order.CustomerParty.PostalAddress.Postbox', payload["order.customerparty.postaladdress.postbox"]);
        r.setStringParameterNoEscape('Order.CustomerParty.PostalAddress.StreetName', payload["order.customerparty.postaladdress.streetname"]);
        r.setStringParameterNoEscape('Order.CustomerParty.PostalAddress.CityName', payload["order.customerparty.postaladdress.cityname"]);
        r.setStringParameterNoEscape('Order.CustomerParty.PostalAddress.PostalZone', payload["order.customerparty.postaladdress.postalzone"]);
        r.setStringParameterNoEscape('Order.CustomerParty.Contact.Name', payload["order.customerparty.contact.name"]);
        r.setStringParameterNoEscape('Order.CustomerParty.Contact.Telephone', payload["order.customerparty.contact.telephone"]);
        r.setStringParameterNoEscape('Order.CustomerParty.Contact.ElectronicMail', payload["order.customerparty.contact.electronicmail"]);
        r.setStringParameterNoEscape('Order.Delivery.DeliveryLocation', payload["order.delivery.deliverylocation"].join(" "));
        r.setStringParameterNoEscape('Order.Delivery.RequestedDeliveryPeriod.StartDate', payload["order.delivery.requesteddeliveryperiod.startdate"]);
        r.setStringParameterNoEscape('Order.Delivery.RequestedDeliveryPeriod.EndDate', payload["order.delivery.requesteddeliveryperiod.enddate"]);
        r.setStringParameterNoEscape('Order.Delivery.TechnicalContact.Name', payload["order.delivery.technicalcontact.name"]);
        r.setStringParameterNoEscape('Order.Delivery.TechnicalContact.Telephone', payload["order.delivery.technicalcontact.telephone"]);
        r.setStringParameterNoEscape('Order.Delivery.TechnicalContact.ElectronicMail', payload["order.delivery.technicalcontact.electronicmail"]);
        r.setStringParameterNoEscape('Order.Orderline', payload["order.orderline"].join(" "));

        //override authentication profile 
        //authentication type ='basic'/ 'oauth2'
        //r.setAuthenticationProfile(authentication type, profile name);

        //set a MID server name if one wants to run the message on MID
        //r.setMIDServer('MY_MID_SERVER');

        //if the message is configured to communicate through ECC queue, either
        //by setting a MID server or calling executeAsync, one needs to set skip_sensor
        //to true. Otherwise, one may get an intermittent error that the response body is null
        //r.setEccParameter('skip_sensor', true);

        var response = r.executeAsync();
        var responseBody = response.getBody();
        var httpStatus = response.getStatusCode();
        gs.info("Empower integration :: XML Payload: " + r.getRequestBody());
    }
    catch (ex) {
        var message = ex.message;
        gs.info("Empower integration :: REST Error: " + message, 'EMPOWER-INTEGRATION');

    }



})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>joni-verco</sys_created_by>
        <sys_created_on>2021-01-19 12:18:22</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>845de3611bf920101ec2dd39cd4bcb55</sys_id>
        <sys_mod_count>16</sys_mod_count>
        <sys_name>Empower work order integration Create</sys_name>
        <sys_overrides/>
        <sys_package display_value="Empower work order" source="x_cgo_empower_work">ebd12ac41bf610d01ec2dd39cd4bcb82</sys_package>
        <sys_policy/>
        <sys_scope display_value="Empower work order">ebd12ac41bf610d01ec2dd39cd4bcb82</sys_scope>
        <sys_update_name>sys_script_845de3611bf920101ec2dd39cd4bcb55</sys_update_name>
        <sys_updated_by>joni-verco</sys_updated_by>
        <sys_updated_on>2021-05-05 12:32:51</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=845de3611bf920101ec2dd39cd4bcb55"/>
</record_update>
